; Use the following syntax: Type:ValueName=Value
; Where Type can be either BOOL, INT, DOUBLE, STRING or PATH
; The Type can also be a comma seperated list of any of the above mentioned types in the format LIST<TYPE>, i.e. LIST<STRING>
; ValueName can be whaterver, but the Value have to match the type indicated.
; It is also possible to base a Settings file on another by the EXTERNAL type, e.g. "EXTERNAL:otherSettingsFile.ini"
; All values can from that settings file can then be overwritten in this new one.

; == General Settings ==
PATH:translatorpath=../../P7Requirements/downward/builds/release/bin/translate/translate.py
PATH:h2path=../../P7Requirements/h2-preprocessor/builds/release32/bin/preprocess

; downwardpath - The filepath to Fast Downward
PATH:downwardpath=../../P7Requirements/downward/fast-downward.py
; validatorpath - The filepath to VAL
PATH:validatorpath=../../P7Requirements/VAL/validate
; startIncrement - The time limit (in seconds) for the initial increment
INT:startIncrement=1
; incrementModifier - By how much the previous increment time limit should be multiplied with
INT:incrementModifier=3
; Maximum time (in seconds) the execution of a reformulator can take in total
INT:totalTimeLimit=120
; timelimitSplit - How much time to reformulate compared to how long Fast Downward gets to run
;                  E.g. If the time for a increment is 10 sec and time limit split is 0.25, then the reformulator gets 5 sec to run while Fast Downward gets 15 sec to run
DOUBLE:timelimitSplit=0.25
; Reformulators
    ; sameoutput - Does nothing
    ; walker - Generates macros based on walks through the state space
        ; greedyWalker - The default walker
        ; greedyResumeWalker - The default walker, where each iteration resumes from best found state
        ; queueWalker - Expands the best state, as decided by heuristic, then generates a path for all possible states
        ; probeWalker - Walks from "random" states in the search space
        ; regressor - Regresses from goal state
        ; partialRegressor - Regresses from goal state, without looking at mutexes
LIST<STRING>:reformulator=regressor
BOOL:validate=true
; runDirect - Force our program to run in Direct mode instead of iteratively
LIST<BOOL>:runDirect=false

; == Walker Settings ==
; walkersHeuristic - Only relevant to the walker reformulator
    ; random - The walker choses actions at random
    ; goalCount - The walker choses actions that increase the number of goal facts in the state, otherwise random
    ; goalPredicateCount - The walker choses actions that increase the number of goal facts in the state, or facts relating to the goal, otherwise random
    ; greedyHeuristic - the walker choses the best looking choice at the current moment, using some other heuristic
STRING:walkerHeuristic=goalPredicateCount
BOOL:printwalkersteps=false
BOOL:validatePaths=false

; == Fast Downward Settings ==
; Search Algorithms
    ; astar        - A* Search
    ; eager        - Eager best-first Search
    ; eager_greedy - Greedy search (eager)
    ; eager_wastar - Eager weighted A*
    ; ehc          - Lazy enforced hill-climbing
    ; iterated     - Iterated Search
    ; lazy         - Lazy best-first search
    ; lazy_greedy  - Greedy search (lazy)
    ; lazy_wstar   - (weighted) A* search (lazy)
    ; Heuristics
; Note: Not all algorithms work with all heuristics!
    ; add - Additive heuristic
    ; blind - Blind heuristic
    ; cea - Context-enhanced additive heuristic
    ; cegar - Additive CEGAR heuristic
    ; cg - Casual graph heuristic
    ; ff - FF heuristic
    ; hm - h^m heuristic
    ; hmax - Max heuristic
    ; lmcut - Landmark-cut heuristic
    ; merge_and_shrink - Merge-and-shrink heuristic
    ; operatorcounting - Operator-counting heuristic
    ; ipdb - Canonical PDB with hillclimbing algorithm
STRING:downwardPreArguments=
;STRING:downwardPreArguments=--alias lama-first
;STRING:downwardPostArguments=
STRING:downwardPostArguments=--search "lazy_greedy([ff(), cea()], [ff(), cea()])"

; == Entanglement Finder Settings ==
; searchCeiling - What level to start at. Leave at -1 to set the starting level to the longest path available
INT:searchCeiling=-1
; searchFloo - The lowest level allowed before stopping the search
INT:searchFloor=3
; levelReductionFactor - By how much the current level should be reduced for each iteration
INT:levelReductionFactor=2
; LevelReductionTypes - What type of level reduction should be used in the entanglement finder
    ; Division - Level = ceil(Level / levelReductionFactor)
    ; Subtraction - Level = Level - levelReductionFactor
STRING:levelReductionTypes=Division
DOUBLE:reformulationTimeFraction=0.1

; == Entanglement Evaluator Settings ==
; minimumQualityPercent - What the minimum quality of an entanglement should be for it to be valid
;                         It should be a number between 0 and 1
DOUBLE:minimumQualityPercent=0.50
; maxCandidates - A hard cutoff of how many candidates are allowed
INT:maxCandidates=100
; EntanglerLengthModifier - What modifier to give to the Quality of occurance length
    ; none - 1
    ; default - Length / MaxLength
    ; lengthBias - 1 / max(MaxLength - Length, 1)
STRING:entanglerLengthModifier=lengthBias
; EntanglerOccuranceModifier - What modifier to give the Quality of occurance count
    ; none - 1
    ; default - Occurance / MaxOccurance
    ; lowOccuranceBias - 1 / Occurance
STRING:entanglerOccuranceModifier=lowOccuranceBias
BOOL:printentanglersteps=false

; == Macros Settings ==
BOOL:verifyMacros=false

; == Misc Settings ==
; debugmode - Enable various debug info
BOOL:debugmode=false
